// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.18;

import "forge-std/Test.sol";
import "../src/AutoSniper.sol";

interface IAutoSniper {
    function fulfillOrder(SniperOrder calldata order, uint256 wethAmount) external;
    function configureMarket(address marketplace, bool status) external;
    function deposit(address sniper) external payable;
    function sniperBalances(address sniper) external view returns (uint256);
    function owner() external view returns (address);
    function withdraw(uint256 amount) external;
    function setUserAllowedMarketplaces(bool guardEnabled, bool marketplaceAllowed, address[] calldata marketplaces) external;
    function setUserMaxTip(uint256 maxTipInWei) external;
    function setUserAllowedNfts(bool guardEnabled, bool nftAllowed, address[] calldata nfts) external;
}

contract AutoSniperTest is Test {
    IAutoSniper sniper;
    address seaport = 0x00000000006c3852cbEf3e08E8dF289169EdE581;
    address looksrare = 0xD112466471b5438C1ca2D218694200e49d81D047;
    address x2y2 = 0x74312363e45DCaBA76c59ec49a7Aa8A65a67EeD3;
    address quit = 0x5C04911bA3a457De6FA0357b339220e4E034e8F7;
    address AUTOSNIPER_CONTRACT_ADDRESS = 0x3d326Db044A62cA554498a883B0E90a473db3C8B;
    address contractAddress = 0x5861ADB950f989dDF24Fc183e536E85463C5F225;
    uint256 tokenId = 781;
    address fulfiller = 0x816B65bd147df5C2566d2C9828815E85ff6055c6;
    uint256 amount = 5700000000000000;
    uint256 tip = 6000000000000000;
    uint256 coinbaseTip = 6000000000000000;

    address[] marketplaces;
    address[] nfts;

    SniperOrder order = SniperOrder(
        quit,
        x2y2,
        amount,
        tip,
        coinbaseTip,
        ItemType(2),
        hex"0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000004800000000000000000000000000000000000000000000000000000fc3e107650600000000000000000000000000000000000000000000000000000000063ddb7f8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003d326db044a62ca554498a883b0e90a473db3c8b00000000000000000000000000000000000000000000000000000000000000003057bcabed74c16bf1c1c4584914e65f16afa148dfb08774adfd60f20cdc9f95382ddbe5ce4e9b71e76607fd80e9d7cd92ac6f390deb39104594cff74704ec24000000000000000000000000000000000000000000000000000000000000001b00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000002427acc10f06270b6f1c27a5e43b8e51000000000000000000000000e4c3794b86e14a81c55abe895293cfc43d650ff90000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000063e6c817000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001c04c24ee19368975032cd78cf1bfe6baec8c0a7677ed892fcc2ea9200aab72fc0c00f4303b78cae187d8d9058da79c35ad96b6e42ac24f75e0e7b0d233639707db000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000003dc1936c427d00000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000e6d48bf4ee912235398b96e16db6f310c21e82cb0000000000000000000000000000000000000000000000000000000000000103000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003dc1936c427d000017dbbebc1ae0d26275b5198dffd1f33cdf839b08900aa42da85dc256814553f5000000000000000000000000f849de01b080adc3a814fabe1e2087475cf2ed823c605807cc5e6bd6fc0d7e4eea50d3e2d66cd00000000000000000000000000000000000000000000000000000000000186a00000000000000000000000007d864f613e6efbf61614919a953ebb95b31ce373",
        contractAddress,
        tokenId
    );

    function setUp() public {
        sniper = IAutoSniper(AUTOSNIPER_CONTRACT_ADDRESS);
        startHoax(sniper.owner());
        // sniper.configureMarket(seaport, true);
        // sniper.configureMarket(looksrare, true);
        // sniper.configureMarket(x2y2, true);
        vm.stopPrank();
        uint256 balance = sniper.sniperBalances(quit);
        hoax(quit);
        sniper.withdraw(balance);
        sniper.deposit{value: 500000000000000000}(quit);
        assertEq(sniper.sniperBalances(quit), 500000000000000000);
    }

    function testOtherThing() public {
        hoax(fulfiller);
        vm.deal(fulfiller, 50 ether);
        AUTOSNIPER_CONTRACT_ADDRESS.call(hex"768a3c1b00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c218d847a18e521ae08f49f7c43882b6d1963c6000000000000000000000000074312363e45dcaba76c59ec49a7aa8a65a67eed300000000000000000000000000000000000000000000000005427a7df1df80000000000000000000000000000000000000000000000000000cfec4833c00b10000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000100000000000000000000000000a1d4657e0e6507d5a94d06da93e94dc7c8c44b510000000000000000000000000000000000000000000000000000000000001d0e00000000000000000000000000000000000000000000000000000000000006c4357a150b0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000004800000000000000000000000000000000000000000000000000000c0deb13382490000000000000000000000000000000000000000000000000000000063deeb61000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003d326db044a62ca554498a883b0e90a473db3c8b0000000000000000000000000000000000000000000000000000000000000000a326cf7f1b36d6710115ccd18a9d20ad122ac70999ed764aab9ee1f159e3c2ee49cc6df7746f9f93dbc70f09d96943997c7344db24243dcfc68bcad6861a509f000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000005e8ee534c995e00e47e71ddd761e97bb0000000000000000000000004749e63a25c34501bc579edcdaa364d3b22060730000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000063decde0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001c0a5aeca581c2851a9430e47c6454a0e2f39b0abf1298a1413f8194ef0e767763242aa65231d1ceb262ad8d0aec8e1573a26a82d71f878b5130073fa184c314448000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000005427a7df1df80000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a1d4657e0e6507d5a94d06da93e94dc7c8c44b510000000000000000000000000000000000000000000000000000000000001d0e0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005427a7df1df80002a877831dd383f1acbf22c83a5bf2e78c56796ff68d47cc392ddbf2e9ee740ab000000000000000000000000f849de01b080adc3a814fabe1e2087475cf2ed823c605807cc5e6bd6fc0d7e4eea50d3e2d66cd00000000000000000000000000000000000000000000000000000000");
    }

    function testFulfillerModifier() public {
        vm.expectRevert(CallerNotFulfiller.selector);
        sniper.fulfillOrder(order, 0);

        hoax(fulfiller);
        sniper.fulfillOrder(order, 0);
    }

    function testExecute() public {
        hoax(fulfiller);
        sniper.fulfillOrder(order, 0);
    }

    function testRefundOnOverpay() public {
        uint256 balanceBefore = sniper.sniperBalances(quit);
        testExecute();
        assertEq(balanceBefore - sniper.sniperBalances(quit), 0.0009 ether + tip);
    }

    function testWethSubsidy() public {
        uint256 balance = sniper.sniperBalances(quit);
        hoax(quit);
        sniper.withdraw(balance);
        assertEq(sniper.sniperBalances(quit), 0);
        IWETH weth = IWETH(0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6);
        hoax(quit);
        weth.deposit{value: balance}();
        assertEq(weth.balanceOf(quit), balance);

        hoax(quit);
        weth.approve(address(sniper), balance);

        hoax(fulfiller);
        sniper.fulfillOrder(order, balance);
        assertEq(weth.balanceOf(quit), 0);
    }

    function testMarketplaceBoolean() public {
        hoax(quit);
        sniper.setUserAllowedMarketplaces(true, true, marketplaces);

        vm.expectRevert(MarketplaceNotAllowed.selector);
        testExecute();

        hoax(quit);
        sniper.setUserAllowedMarketplaces(false, true, marketplaces);
        testExecute();
    }

    function testMarketplaceArray() public {
        hoax(quit);
        sniper.setUserAllowedMarketplaces(true, true, marketplaces);

        vm.expectRevert(MarketplaceNotAllowed.selector);
        testExecute();
        marketplaces.push(seaport);
        hoax(quit);
        sniper.setUserAllowedMarketplaces(true, true, marketplaces);
        testExecute();
    }

    function testMaxTip() public {
        hoax(quit);
        vm.expectRevert(TipBelowMinimum.selector);
        sniper.setUserMaxTip(0.003 ether);

        hoax(quit);
        sniper.setUserMaxTip(0.005 ether);

        vm.expectRevert(MaxTipExceeded.selector);
        testExecute();

        hoax(quit);
        sniper.setUserMaxTip(5 ether);
        testExecute();
    }

    function testNftBoolean() public {
        hoax(quit);
        sniper.setUserAllowedNfts(true, true, nfts);

        vm.expectRevert(TokenContractNotAllowed.selector);
        testExecute();

        hoax(quit);
        sniper.setUserAllowedNfts(false, true, nfts);
        testExecute();
    }

    function testNftArray() public {
        hoax(quit);
        sniper.setUserAllowedNfts(true, true, nfts);

        vm.expectRevert(TokenContractNotAllowed.selector);
        testExecute();
        nfts.push(contractAddress);
        hoax(quit);
        sniper.setUserAllowedNfts(true, true, nfts);
        testExecute();
    }
}
